"""
Django settings for rainbowwarriors project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
if os.path.isfile('env.py'):
    import env

development = os.environ.get("DEVELOPMENT")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = development

ALLOWED_HOSTS = ['127.0.0.1',
                 'localhost',
                 'rainbowwarriors-3624423ecf9b.herokuapp.com',
                 # Allowed my workspace as host - Johnny
                 '8000-joao4569-rainbowwarrior-copzqgw3pzv.ws-eu100.gitpod.io',
                 #allow my workspace access - Debbie
                 '8000-joao4569-rainbowwarrior-m3hy51i95r2.ws-eu100.gitpod.io',
                 ]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Johnny, Django Allauth
    'django.contrib.sites',  # Taken from Allauth docs
    'allauth',  # Taken from Allauth docs
    'allauth.account',  # Taken from Allauth docs
    'allauth.socialaccount',  # Taken from Allauth docs

    # Apps
    'home',
    # Apps - Johnny
    'community',
    # Apps - Debbie
    'resources',
    # Crispy Forms
    'crispy_forms',
    'crispy_tailwind'

]

CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"
CRISPY_TEMPLATE_PACK = "tailwind"

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'rainbowwarriors.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
                os.path.join(BASE_DIR, 'templates'),
                os.path.join(BASE_DIR, 'templates', 'allauth'),
            ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Django Allauth authentication setup by Johnny

# Uncommented by Johnny after Allauth installation
AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of allauth.
    'django.contrib.auth.backends.ModelBackend',

    # Allauth specific authentication methods, i.e. login by email.
    'allauth.account.auth_backends.AuthenticationBackend',
)

SITE_ID = 1

WSGI_APPLICATION = 'rainbowwarriors.wsgi.application'

CSRF_TRUSTED_ORIGINS = ['https://8000-joao4569-rainbowwarrior-copzqgw3pzv.ws-eu100.gitpod.io']

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Commented out by Johnny
# DATABASES = {
#        'default': dj_database_url.parse(os.environ.get('DATABASE_URL'))
# }

# Database logic - Johnny
# if 'DATABASE_URL' in os.environ:
DATABASES = {
    'default': dj_database_url.parse(os.environ.get('DATABASE_URL'))
}
# else:
#     DATABASES = {
#         'default': {
#             'ENGINE': 'django.db.backends.sqlite3',
#             'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#         }
#     }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Account Setup

# username, email, or both to authenticate
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
# email field required
ACCOUNT_EMAIL_REQUIRED = True
# username field required at registration
ACCOUNT_USERNAME_REQUIRED = True
# email field verification needed: 'none' or 'mandatory'
ACCOUNT_EMAIL_VERIFCATION = 'none'
ACCOUNT_USERNAME_MIN_LENGTH = 4
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'


# Static files (CSS, JavaScript, Images)
# Adding Cloudinary Static and Media coverage - Alfredo

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)
STATICFILES_STORAGE = ('cloudinary_storage.storage.'
                       'StaticHashedCloudinaryStorage')

MEDIA_URL = '/media/'
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
